AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template sets up an AWS environment for PGP decryption, including an S3
  bucket, IAM roles, a Lambda function, and necessary permissions.

Parameters: 
  S3BucketName: 
    Type: String 
    Description: Enter the S3 bucket name for storing files uploaded via AWS Transfer Family.

Resources:
  PGPPrivateKey:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${AWS::StackName}-PGPPrivateKey'
      Description: 'Store your PGP private key here.'
      GenerateSecretString:
        SecretStringTemplate: '{"PGPPrivateKey": "replace-this-with-your-key"}'
        GenerateStringKey: 'dummy'

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled

  PGPLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-PGPLambdaExecutionRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'secretsmanager:GetSecretValue'
                Resource: !Ref PGPPrivateKey
              - Sid: WriteLogs
                Effect: Allow
                Action:
                  - "logs:*"
                Resource: 'arn:aws:logs:*:*:*'
              - Sid: AccessS3Bucket
                Effect: Allow
                Action: ['s3:*']
                Resource: 
                  - !Sub '${S3Bucket.Arn}/*'

  PGPDecryptionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-PGPDecryptionFunction'
      Runtime: python3.8
      MemorySize: 256
      Timeout: 20
      Role: !GetAtt PGPLambdaExecutionRole.Arn
      Handler: index.lambda_handler
      # The code property would remain the same
      # ...

  ManagedWorkflowRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-ManagedWorkflowRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: transfer.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: ManagedWorkflowPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ManagedWorkflowS3Access
                Effect: Allow
                Action: ['s3:*']
                Resource: 
                  - !Sub '${S3Bucket.Arn}/*'

  TransferFamilyUserRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-TransferFamilyUserRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: transfer.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: TransferFamilyUserPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: TransferFamilyS3Access
                Effect: Allow
                Action: ['s3:*']
                Resource: 
                  - !Sub '${S3Bucket.Arn}/*'

  TransferWorkflow:
    Type: AWS::Transfer::Workflow
    Properties:
      Description: 'Workflow for PGP decryption process.'
      # Steps and OnExceptionSteps remain the same
      # ...

Outputs:
  TransferFamilyRoleArn:
    Description: "ARN for Transfer Family User Role"
    Value: !GetAtt TransferFamilyUserRole.Arn
  S3BucketNameOutput:
    Description: "S3 Bucket Name"
    Value: !Ref S3Bucket
